# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  token: String!
}

type Category {
  createdAt: DateTime!
  id: ID!
  movementType: MovementType!
  movementTypeId: Int!
  name: String!
  updatedAt: DateTime
}

input CategoryInput {
  movementTypeId: Float!
  name: String!
}

input CategoryUpdateInput {
  movementTypeId: Float
  name: String
}

input CredentialsInput {
  email: String!
  password: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Income {
  category: IncomeCategory!
  categoryId: Int!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
  user: User!
  userId: Int!
  value: Float!
}

type IncomeCategory {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
}

input IncomeCategoryInput {
  name: String!
}

input IncomeInput {
  categoryId: Float!
  name: String!
  value: Float!
}

"""Movement direction in/out"""
enum MovementDirection {
  IN
  OUT
}

type MovementType {
  createdAt: DateTime!
  direction: MovementDirection!
  id: ID!
  name: String!
  updatedAt: DateTime
}

input MovementTypeInput {
  direction: MovementDirection!
  name: String!
}

input MovementTypeUpdateInput {
  direction: String
  name: String
}

type Mutation {
  createCategory(input: CategoryInput!): Category!
  createIncome(input: IncomeInput!): Income!
  createIncomeCategory(input: IncomeCategoryInput!): IncomeCategory!
  createMovementType(input: MovementTypeInput!): MovementType!
  createSpending(input: SpendingInput!): Spending!
  createSpendingCategory(input: SpendingCategoryInput!): SpendingCategory!
  createUser(input: UserInput!): User!
  deleteCategory(id: Float!): Category!
  deleteIncome(id: Float!): Income!
  deleteIncomeCategory(id: Float!): IncomeCategory!
  deleteMovementType(id: Float!): MovementType!
  deleteSpending(id: Float!): Spending!
  deleteSpendingCategory(id: Float!): SpendingCategory!
  login(input: CredentialsInput!): AccessToken!
  updateCategory(id: Float!, input: CategoryUpdateInput!): Category!
  updateIncome(id: Float!, input: IncomeInput!): Income!
  updateIncomeCategory(id: Float!, input: IncomeCategoryInput!): IncomeCategory!
  updateMovementType(id: Float!, input: MovementTypeUpdateInput!): MovementType!
  updateSpending(id: Float!, input: SpendingInput!): Spending!
  updateSpendingCategory(id: Float!, input: SpendingCategoryInput!): SpendingCategory!
}

type Query {
  getCategories: [Category!]!
  getCategoryById(id: Float!): Category!
  getIncomeById(id: Float!): Income!
  getIncomeCategories: [IncomeCategory!]!
  getIncomeCategoryById(id: Float!): IncomeCategory!
  getIncomes: [Income!]!
  getLoggedUser: User!
  getMovementTypeById(id: Float!): MovementType!
  getMovementTypes: [MovementType!]!
  getSpendingById(id: Float!): Spending!
  getSpendingCategories: [SpendingCategory!]!
  getSpendingCategoryById(id: Float!): SpendingCategory!
  getSpendings: [Spending!]!
  getUser(id: Float!): User!
  getUsers: [User!]!
}

type Spending {
  category: SpendingCategory!
  categoryId: Int!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
  user: User!
  userId: Int!
  value: Float!
}

type SpendingCategory {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime
}

input SpendingCategoryInput {
  name: String!
}

input SpendingInput {
  categoryId: Float!
  name: String!
  value: Float!
}

type User {
  email: String!
  id: ID!
  name: String!
  password: String!
}

input UserInput {
  email: String!
  name: String!
  password: String!
}
